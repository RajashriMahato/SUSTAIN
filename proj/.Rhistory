m=m-alpha*sum((y_p-y)*x)
c=c-alpha*sum(y_p-y)
if(abs(lf-lf_new)<=conv_thr){
break
}
lf <- lf_new
iterations=iterations+1
}
return(paste("Optimum slope",m, "Optimum intercept",c,"iterations", iterations,"Loss function",lf)
}
data1 <- mtcars
gd(data1$wt, data1$mpg,-0.2,32,0.001,0.0001,10000)
reg <- lm(data1$mpg~data1$wt)
reg
gd <- function(x,y,m,c, alpha, conv_thr, iter){
iterations <- 0
lf <- 0
while(iterations<=iter){
y_p = m*x+c
lf_new <- 0.5*sum(y_p-y)^2
m=m-alpha*sum((y_p-y)*x)
c=c-alpha*sum(y_p-y)
if(abs(lf-lf_new)<=conv_thr){
break
}
lf <- lf_new
iterations=iterations+1
}
return(paste("Optimum slope",m, "Optimum intercept",c,"iterations", iterations,"Loss function",lf))
}
data1 <- mtcars
gd(data1$wt, data1$mpg,-0.2,32,0.001,0.0001,10000)
reg <- lm(data1$mpg~data1$wt)
reg
gd<- function(x,y,m,c,alpha,conv_thr,iter){
iterations<-0
Lf<-0
while(iterations<=iter){
y_p=m*x+c
Lf_new<-0.5*sum(y_p-y)^2
m=m-alpha*sum((y_p-y)*x)
c=c-alpha*sum(y_p-y)
if(abs(Lf-Lf_new)<=conv_thr){
break }
Lf=Lf_new
iterations=iterations+1 }
return(paste("Optimal Intercept ",c,"Optimal slop ",m)) }
data<-mtcars gd(data$wt,data$mpg,-0.2,32,0.001,0.0001,1000)
plot(data$wt,data$mpg)
reg<-lm(data$mpg~data$wt)
reg
abline(reg,col='red')
data<-mtcars
gd(data$wt,data$mpg,-0.2,32,0.001,0.0001,1000)
return(paste("Optimum slope",m, "Optimum intercept",c,"iterations", iterations,"Loss function",lf)) }
return(paste("Optimum slope",m, "Optimum intercept",c,"iterations", iterations,"Loss function",lf))
m=m-alpha*sum((y_p-y)*x)
gd<- function(x,y,m,c,alpha,conv_thr,iter){
iterations<-0
Lf<-0
while(iterations<=iter){
y_p=m*x+c
Lf_new<-0.5*sum(y_p-y)^2
m=m-alpha*sum((y_p-y)*x)
c=c-alpha*sum(y_p-y)
if(abs(Lf-Lf_new)<=conv_thr){
break }
Lf=Lf_new
iterations=iterations+1 }
return(paste("Optimum slope",m, "Optimum intercept",c,"iterations", iterations,"Loss function",Lf))
data<-mtcars
gd(data$wt,data$mpg,-0.2,32,0.001,0.0001,1000)
plot(data$wt,data$mpg)
reg<-lm(data$mpg~data$wt)
plot(data$wt,data$mpg)
reg<-lm(data$mpg~data$wt)
reg
abline(reg,col='red')
plot(data$wt,data$mpg) reg<-lm(data$mpg~data$wt)
reg<-lm(data$mpg~data$wt)
abline(reg,col='red')
plot(data$wt,data$mpg)
reg<-lm(data$mpg~data$wt)
abline(reg,col='red')
data<-mtcars
gd(data$wt,data$mpg,-0.2,32,0.001,0.0001,1000)
plot(data$wt,data$mpg)
reg<-lm(data$mpg~data$wt)
reg
abline(reg,col='red')
return(paste("Optimum slope",m, "Optimum intercept",c,"iterations", iterations,"Loss function",Lf))
gd(data$wt,data$mpg,-0.2,32,0.001,0.0001,1000)
return(paste("Optimum slope",m, "Optimum intercept",c,"iterations", iterations,"Loss function",lf))
gd <- function(x,y,m,c, alpha, conv_thr, iter){
iterations <- 0
lf <- 0
while(iterations<=iter){
y_p = m*x+c
lf_new <- 0.5*sum(y_p-y)^2
m=m-alpha*sum((y_p-y)*x)
c=c-alpha*sum(y_p-y)
if(abs(lf-lf_new)<=conv_thr){
break
}
lf <- lf_new
iterations=iterations+1
}
return(paste("Optimum slope",m, "Optimum intercept",c,"iterations", iterations,"Loss function",lf))
}
data1 <- mtcars
gd(data1$wt, data1$mpg,-0.2,32,0.001,0.0001,10000)
reg <- lm(data1$mpg~data1$wt)
reg
View(reg)
gd1<- function(x1,x2,y,m1,m2,c,alpha,conv_thr,iter){
iterations<-0
Lf<-0
while(iterations<=iter){
y_p=m1*x1+m2*x2+c
Lf_new<-0.5*sum(y_p-y)^2
m1=m1-alpha*sum((y_p-y)*x1)
m2=m2-alpha*sum((y_p-y)*x2)
c=c-alpha*sum(y_p-y)
if(abs(Lf-Lf_new)<=conv_thr){
break }
Lf=Lf_new
iterations=iterations+1 }
return(paste("Optimal Intercept ",c,"Optimal slop one ",m1,"Optimal slop two ",m2)) }
data<-mtcars
view(data)
gd1(data$wt,data$drat,data$mpg,-0.2,-0.4,32,0.001,0.00001,10000)
reg1<-lm(data$mpg~(data$wt+data$drat))
reg1
gd1(data$wt,data$drat,data$mpg,-0.2,-0.4,32,0.001,0.00001,10000)
reg1<-lm(data$mpg~(data$wt+data$drat))
reg1
lr
rm(list=ls())
Mgd<-function(x1,x2,y,m1,m2,c,alpha,gamma,iter){
iterations=0
Lf<-0
u_m1<-0
u_m2<-0
u_c<-0
while(iterations<=iter){
y_pred<-m1*x1+m2*x2+c
Lf_new<-0.5*sum((y_pred-y)^2)
nu_m1<-gamma*u_m1+alpha*sum((y_pred-y)*x1)
nu_m2<-gamma*u_m2+alpha*sum((y_pred-y)*x2)
nu_c<-gamma*u_c+alpha*sum(y_pred-y)
m1<-m1-nu_m1
m2<-m2-nu_m2
c<-c-nu_c
u_m1<-nu_m1
u_m2<-nu_m2
u_c<-nu_c
Lf<-Lf_new
iterations=iterations+1
}
return(paste("optimal intercept:",c,"optimatl slope:",m1,m2,"Loss funciton:",Lf,"iterations:",iterations))
}
data1<-mtcars
plot(data1$mpg,data1$wt,col="red",pch=20)
Mgd(data1$wt,data1$hp,data1$mpg,-0.2,-0.2,32,0.000002,0,1000000)
lr<-lm(data1$mpg~data1$hp+data1$wt)
lr
return(paste("optimal intercept:",c,"optimal slope:",m1,m2,"Loss funciton:",Lf,"iterations:",iterations))
rm(list=ls())
Mgd<-function(x1,x2,y,m1,m2,c,alpha,gamma,iter){
iterations=0
Lf<-0
u_m1<-0
u_m2<-0
u_c<-0
while(iterations<=iter){
y_pred<-m1*x1+m2*x2+c
Lf_new<-0.5*sum((y_pred-y)^2)
nu_m1<-gamma*u_m1+alpha*sum((y_pred-y)*x1)
nu_m2<-gamma*u_m2+alpha*sum((y_pred-y)*x2)
nu_c<-gamma*u_c+alpha*sum(y_pred-y)
m1<-m1-nu_m1
m2<-m2-nu_m2
c<-c-nu_c
u_m1<-nu_m1
u_m2<-nu_m2
u_c<-nu_c
Lf<-Lf_new
iterations=iterations+1
}
return(paste("optimal intercept:",c,"optimal slope:",m1,m2,"Loss funciton:",Lf,"iterations:",iterations))
}
data1<-mtcars
plot(data1$mpg,data1$wt,col="red",pch=20)
Mgd(data1$wt,data1$hp,data1$mpg,-0.2,-0.2,32,0.000002,0,1000000)
lr<-lm(data1$mpg~data1$hp+data1$wt)
lr
return(paste("optimal intercept:",c,"optimal slope:",m1,m2,"Loss function:",Lf,"iterations:",iterations))
rm(list=ls())
Mgd<-function(x1,x2,y,m1,m2,c,alpha,gamma,iter){
iterations=0
Lf<-0
u_m1<-0
u_m2<-0
u_c<-0
while(iterations<=iter){
y_pred<-m1*x1+m2*x2+c
Lf_new<-0.5*sum((y_pred-y)^2)
nu_m1<-gamma*u_m1+alpha*sum((y_pred-y)*x1)
nu_m2<-gamma*u_m2+alpha*sum((y_pred-y)*x2)
nu_c<-gamma*u_c+alpha*sum(y_pred-y)
m1<-m1-nu_m1
m2<-m2-nu_m2
c<-c-nu_c
u_m1<-nu_m1
u_m2<-nu_m2
u_c<-nu_c
Lf<-Lf_new
iterations=iterations+1
}
return(paste("optimal intercept:",c,"optimal slope:",m1,m2,"Loss function:",Lf,"iterations:",iterations))
}
data1<-mtcars
plot(data1$mpg,data1$wt,col="red",pch=20)
Mgd(data1$wt,data1$hp,data1$mpg,-0.2,-0.2,32,0.000002,0,1000000)
lr<-lm(data1$mpg~data1$hp+data1$wt)
lr
library(MASS)
data(Boston)
str(Boston)
library(e1071)
model = svm(medv ~ ., data = Boston)
print(model)
library(MASS)
data(Boston)
str(Boston)
library(e1071)
model = svm(medv ~ ., data = Boston)
print(model)
set.seed(1)
library(caret)
library(kernlab)
model <- train(
medv ~ .,
data = Boston,
method = 'svmRadial'
)
set.seed(1)
library(caret)
library(kernlab)
library(caret)
install.packages("kernlab")
library(kernlab)
model <- train(
medv ~ .,
data = Boston,
method = 'svmRadial'
)
model
set.seed(1)
model2 <- train(
medv ~ .,
data = Boston,
method = 'svmRadial',
preProcess = c("center", "scale")
)
model2
set.seed(1)
inTraining <- createDataPartition(Boston$medv, p = .80, list = FALSE)
training <- Boston[inTraining,]
testing  <- Boston[-inTraining,]
set.seed(1)
model3 <- train(
medv ~ .,
data = training,
method = 'svmRadial',
preProcess = c("center", "scale")
)
model3
test.features = subset(testing, select=-c(medv))
test.target = subset(testing, select=medv)[,1]
predictions = predict(model3, newdata = test.features)
# RMSE
sqrt(mean((test.target - predictions)^2))
sqrt(mean((test.target - predictions)^2))
cor(test.target, predictions) ^ 2
sqrt(mean((test.target - predictions)^2))
cor(test.target, predictions) ^ 2
model4
set.seed(1)
ctrl <- trainControl(
method = "cv",
number = 10,
)
set.seed(1)
model4 <- train(
medv ~ .,
data = testing,
method = 'svmRadial',
preProcess = c("center", "scale"),
trCtrl = ctrl
)
model4
test.features = subset(testing, select=-c(medv))
test.target = subset(testing, select=medv)[,1]
predictions = predict(model4, newdata = test.features)
# RMSE
sqrt(mean((test.target - predictions)^2))
set.seed(1)
tuneGrid <- expand.grid(
C = c(0.25, .5, 1),
sigma = 0.1
)
model5 <- train(
medv ~ .,
data = training,
method = 'svmRadial',
preProcess = c("center", "scale"),
trControl = ctrl,
tuneGrid = tuneGrid
)
model5
plot(model5)
str(Boston)
library(MASS)
data(Boston)
str(Boston)
View(data)
data(Boston)
str(Boston)
View(data
data(Boston)
str(Boston)
View(data)
View(Boston)
setwd("~/Desktop/EDA Proj")
dat <- read.csv("solar-energy-consumption.csv")
dat1 <- read.csv("wind-generation.csv")
dat2 <- read.csv("biofuel-production.csv")
dat3 <- read.csv("ahydropower-consumption.csv")
dat4 <- read.csv("anuclear-energy-generation.csv")
library(dplyr)
library(uroot)
library(forecast)
library(tseries)
sol <- filter(dat, Entity=='India')
pred1 <- ts(sol$Electricity.from.solar..TWh.,start=min(sol$Year),end=max(sol$Year),frequency=1)
plot(pred1)
win <- filter(dat1, Entity=='India')
pred2 <- ts(win$Electricity.from.wind..TWh.,start=min(win$Year),end=max(win$Year),frequency=1)
plot(pred2
pred2 <- ts(win$Electricity.from.wind..TWh.,start=min(win$Year),end=max(win$Year),frequency=1)
plot(pred2)
adf.test(pred2)
bio <- filter(dat2, Entity=='India')
pred3 <- ts(bio$Biofuels.Production...TWh...Total,start=min(bio$Year),end=max(bio$Year),frequency=1)
plot(pred3)
for2
adf.test(pred3)
hyd <- filter(dat3, Entity=='India')
pred4 <- ts(hyd$Electricity.from.hydro..TWh.,start=min(hyd$Year),end=max(hyd$Year),frequency=1)
plot(pred4)
adf.test(pred4)
nuc <- filter(dat4, Entity=='India')
pred5 <- ts(nuc$Electricity.from.nuclear..TWh.,start=min(nuc$Year),end=max(nuc$Year),frequency=1)
plot(pred5)
acf(pred5)
pacf(pred5)
adf.test(pred5)
gmodel5=auto.arima(pred5,ic="aic",trace=TRUE)
hyd <- filter(dat3, Entity=='India')
pred4 <- ts(hyd$Electricity.from.hydro..TWh.,start=min(hyd$Year),end=max(hyd$Year),frequency=1)
plot(pred4)
acf(pred4)
pacf(pred4)
adf.test(pred4)
gmodel4=auto.arima(pred4,ic="aic",trace=TRUE)
for4=forecast(gmodel4,level=c(95),h=10)
for4
plot(for4)
accuracy(for4)
hyd <- filter(dat3, Entity=='India')
pred4 <- ts(hyd$Electricity.from.hydro..TWh.,start=min(hyd$Year),end=max(hyd$Year),frequency=1)
plot(pred4)
acf(pred4)
pacf(pred4)
adf.test(pred4)
gmodel4=auto.arima(pred4,ic="aic",trace=TRUE)
bio <- filter(dat2, Entity=='India')
pred3 <- ts(bio$Biofuels.Production...TWh...Total,start=min(bio$Year),end=max(bio$Year),frequency=1)
plot(pred3)
acf(pred3)
pacf(pred3)
adf.test(pred3)
gmodel3=auto.arima(pred3,ic="aic",trace=TRUE)
win <- filter(dat1, Entity=='India')
pred2 <- ts(win$Electricity.from.wind..TWh.,start=min(win$Year),end=max(win$Year),frequency=1)
plot(pred2)
acf(pred2)
pacf(pred2)
adf.test(pred2)
gmodel2=auto.arima(pred2,ic="aic",trace=TRUE)
for2=forecast(gmodel2,level=c(95),h=10)
gmodel1=auto.arima(pred1,ic="aic",trace=TRUE
gmodel1=auto.arima(pred1,ic="aic",trace=TRUE)
gmodel1=auto.arima(pred1,ic="aic",trace=TRUE)
sol <- filter(dat, Entity=='India')
pred1 <- ts(sol$Electricity.from.solar..TWh.,start=min(sol$Year),end=max(sol$Year),frequency=1)
plot(pred1)
acf(pred1)
pacf(pred1)
adf.test(pred1)
gmodel1=auto.arima(pred1,ic="aic",trace=TRUE)
win <- filter(dat1, Entity=='India')
pred2 <- ts(win$Electricity.from.wind..TWh.,start=min(win$Year),end=max(win$Year),frequency=1)
plot(pred2)
acf(pred2)
pacf(pred2)
adf.test(pred2)
gmodel2=auto.arima(pred2,ic="aic",trace=TRUE)
bio <- filter(dat2, Entity=='India')
pred3 <- ts(bio$Biofuels.Production...TWh...Total,start=min(bio$Year),end=max(bio$Year),frequency=1)
plot(pred3)
acf(pred3)
pacf(pred3)
adf.test(pred3)
gmodel3=auto.arima(pred3,ic="aic",trace=TRUE)
hyd <- filter(dat3, Entity=='India')
pred4 <- ts(hyd$Electricity.from.hydro..TWh.,start=min(hyd$Year),end=max(hyd$Year),frequency=1)
plot(pred4)
acf(pred4)
pacf(pred4)
adf.test(pred4)
gmodel4=auto.arima(pred4,ic="aic",trace=TRUE)
for4=forecast(gmodel4,level=c(95),h=10)
nuc <- filter(dat4, Entity=='India')
pred5 <- ts(nuc$Electricity.from.nuclear..TWh.,start=min(nuc$Year),end=max(nuc$Year),frequency=1)
plot(pred5)
acf(pred5)
pacf(pred5)
adf.test(pred5)
gmodel5=auto.arima(pred5,ic="aic",trace=TRUE)
for5=forecast(gmodel5,level=c(95),h=10)
sol <- filter(dat, Entity=='India')
pred1 <- ts(sol$Electricity.from.solar..TWh.,start=min(sol$Year),end=max(sol$Year),frequency=1)
plot(pred1)
acf(pred1)
pacf(pred1)
adf.test(pred1)
gmodel1=auto.arima(pred1,ic="aic",trace=TRUE)
win <- filter(dat1, Entity=='India')
pred2 <- ts(win$Electricity.from.wind..TWh.,start=min(win$Year),end=max(win$Year),frequency=1)
plot(pred2)
acf(pred2)
pacf(pred2)
adf.test(pred2)
gmodel2=auto.arima(pred2,ic="aic",trace=TRUE)
bio <- filter(dat2, Entity=='India')
pred3 <- ts(bio$Biofuels.Production...TWh...Total,start=min(bio$Year),end=max(bio$Year),frequency=1)
plot(pred3)
acf(pred3)
pacf(pred3)
adf.test(pred3)
gmodel3=auto.arima(pred3,ic="aic",trace=TRUE)
hyd <- filter(dat3, Entity=='India')
pred4 <- ts(hyd$Electricity.from.hydro..TWh.,start=min(hyd$Year),end=max(hyd$Year),frequency=1)
plot(pred4)
acf(pred4)
pacf(pred4)
adf.test(pred4)
gmodel4=auto.arima(pred4,ic="aic",trace=TRUE)
nuc <- filter(dat4, Entity=='India')
pred5 <- ts(nuc$Electricity.from.nuclear..TWh.,start=min(nuc$Year),end=max(nuc$Year),frequency=1)
plot(pred5)
acf(pred5)
pacf(pred5)
adf.test(pred5)
gmodel5=auto.arima(pred5,ic="aic",trace=TRUE)
sol <- filter(dat, Entity=='India')
pred1 <- ts(sol$Electricity.from.solar..TWh.,start=min(sol$Year),end=max(sol$Year),frequency=1)
plot(pred1)
acf(pred1)
pacf(pred1)
adf.test(pred1)
gmodel1=auto.arima(pred1,ic="aic",trace=TRUE)
win <- filter(dat1, Entity=='India')
pred2 <- ts(win$Electricity.from.wind..TWh.,start=min(win$Year),end=max(win$Year),frequency=1)
plot(pred2)
acf(pred2)
pacf(pred2)
adf.test(pred2)
gmodel2=auto.arima(pred2,ic="aic",trace=TRUE)
bio <- filter(dat2, Entity=='India')
pred3 <- ts(bio$Biofuels.Production...TWh...Total,start=min(bio$Year),end=max(bio$Year),frequency=1)
plot(pred3)
acf(pred3)
pacf(pred3)
adf.test(pred3)
gmodel3=auto.arima(pred3,ic="aic",trace=TRUE)
hyd <- filter(dat3, Entity=='India')
pred4 <- ts(hyd$Electricity.from.hydro..TWh.,start=min(hyd$Year),end=max(hyd$Year),frequency=1)
plot(pred4)
acf(pred4)
pacf(pred4)
adf.test(pred4)
gmodel4=auto.arima(pred4,ic="aic",trace=TRUE)
nuc <- filter(dat4, Entity=='India')
pred5 <- ts(nuc$Electricity.from.nuclear..TWh.,start=min(nuc$Year),end=max(nuc$Year),frequency=1)
plot(pred5)
acf(pred5)
pacf(pred5)
adf.test(pred5)
gmodel5=auto.arima(pred5,ic="aic",trace=TRUE)
